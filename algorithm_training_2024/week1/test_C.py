from C import *

I1 = [['.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.'],
      ['.', '.', '#', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.']]
I1.reverse()

I2 = [['.', '#', '#', '.'],
      ['.', '#', '#', '.'],
      ['.', '#', '#', '.'],
      ['.', '.', '.', '.']]
I2.reverse()


X1 = [['#', '.', '.', '.', '#'],
      ['.', '#', '.', '#', '.'],
      ['.', '.', '#', '.', '.'],
      ['.', '#', '.', '#', '.'],
      ['#', '.', '.', '.', '#']]
X1.reverse()

C1 = [['.', '.', '.', '.', '.'],
      ['.', '#', '#', '#', '.'],
      ['.', '#', '.', '.', '.'],
      ['.', '#', '#', '#', '.'],
      ['.', '.', '.', '.', '.']]
C1.reverse()

L1 = [['.', '.', '.', '.', '.', '.'],
      ['#', '#', '.', '.', '.', '.'],
      ['#', '#', '.', '.', '.', '.'],
      ['#', '#', '.', '.', '.', '.'],
      ['#', '#', '#', '#', '#', '.'],
      ['#', '#', '#', '#', '#', '.']]
L1.reverse()

O1 = [['.', '#', '#', '#', '.'],
      ['.', '#', '.', '#', '.'],
      ['.', '#', '.', '#', '.'],
      ['.', '#', '#', '#', '.'],
      ['.', '.', '.', '.', '.']]
O1.reverse()

P1 = [['#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '#', '#'],
      ['#', '.', '.', '.', '.', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.']]
P1.reverse()

H1 = [['#', '#', '.', '.', '.', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#'],
      ['#', '#', '.', '.', '.', '#', '#'],
      ['#', '#', '.', '.', '.', '#', '#'],
      ['#', '#', '.', '.', '.', '#', '#'],
      ['#', '#', '.', '.', '.', '#', '#'],
      ['#', '#', '.', '.', '.', '#', '#']]
H1.reverse()

inc_O = [['.', '#', '#', '#', '#'],
         ['.', '#', '#', '#', '#'],
         ['.', '#', '.', '.', '#'],
         ['.', '#', '.', '#', '#'],
         ['.', '#', '#', '#', '#']]
inc_O.reverse()

inc_C = [['.', '.', '.', '.', '.', '.'],
         ['.', '.', '#', '#', '#', '#'],
         ['.', '.', '#', '#', '.', '.'],
         ['.', '.', '#', '#', '.', '.'],
         ['#', '.', '#', '#', '#', '#'],
         ['.', '.', '.', '.', '.', '.']]
inc_C.reverse()


inc_L = [['#', '#', '#', '#', '#', '.'],
         ['#', '#', '#', '#', '#', '.'],
         ['#', '#', '.', '.', '.', '.'],
         ['#', '#', '.', '.', '.', '.'],
         ['#', '#', '.', '#', '.', '.'],
         ['.', '.', '.', '.', '.', '.']]

inc_L2 = [['#', '.', '#', '#', '#', '.'],
          ['#', '#', '#', '#', '#', '.'],
          ['#', '#', '.', '.', '.', '.'],
          ['#', '#', '.', '.', '.', '.'],
          ['#', '#', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.', '.']]

inc_P = [['#', '#', '#', '#', '#', '#', '#'],
      ['#', '#', '#', '.', '.', '#', '#'],
      ['#', '#', '#', '.', '.', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.']]
inc_P.reverse()

inc_I = [['.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '#', '#', '.', '.', '.', '.'],
         ['.', '.', '#', '#', '.', '.', '.', '.'],
         ['.', '#', '#', '#', '#', '.', '.', '.'],
         ['.', '.', '#', '#', '.', '.', '.', '.'],
         ['.', '.', '#', '#', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.']]
inc_I.reverse()


def test():
    assert find_rect(I2, '#') == ((1, 1), (3, 4))
    assert find_rect(I1, '#') == ((2, 1), (3, 2))
    assert find_rect(X1, '#') == ((0, 0), (5, 5))


def test_solution():
    assert solution(I1) == 'I'
    assert solution(I2) == 'I'
    assert solution(X1) == 'X'
    assert solution(O1) == 'O'
    assert solution(C1) == 'C'
    assert solution(L1) == 'L'

    assert solution(H1) == 'H'
    assert solution(P1) == 'P'


def test_inc_solution():
    assert solution(inc_O) == 'X'
    assert solution(inc_C) == 'X'
    assert solution(inc_L) == 'X'
    assert solution(inc_L2) == 'X'
    assert solution(inc_P) == 'X'
    assert solution(inc_I) == 'X'


def test_is_H():
    assert is_H(0, 0, 7,7, 2, 0, 5, 5, 2, 6, 5, 7)
